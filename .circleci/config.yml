version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "<<parameters.stack>>"


jobs:

  build-frontend:
    docker:
      - image: cimg/node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            #!/bin/bash
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            #!/bin/bash
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            #!/bin/bash
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: cimg/node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            #!/bin/bash
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: cimg/node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend-end audit
          command: |
            #!/bin/bash
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend-end audit
          command: |
            #!/bin/bash
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install circleci dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to Ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment:
          stack: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          stack: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: cimg/python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ea:55:1c:9c:5c:df:79:68:04:c9:cc:db:a8:50:d5:36:8b:23:dd:75"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install ansible
          command: |
            pipenv install awscli
            pipenv install ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          stack: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          stack: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: cimg/node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # deploys server at an unstable state
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            [[ grep -q "has been executed successfully" \
            backend/migrations_dump.txt ]] \
            && [[ curl https://kvdb.io/73BxsktDqNfPCXWvm3FfVm/migration_${CIRCLE_WORKFLOW_ID:0:7}?access_token=${KVDB_ACCESS_TOKEN} -d '1' ]]
      - destroy-environment:
          stack: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          stack: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}  


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend
      - test-backend
      - scan-frontend
      - scan-backend
      - deploy-infrastructure
      - configure-infrastructure
      - run-migrations