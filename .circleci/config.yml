version: 2.1

commands:
  setup-pip3:
    description: Install the latest pip3 on debian-based image.
    steps:
      - run:
          name: Upgrade python3 and installl the latest pip
          command: |
            sudo apt -y update && sudo apt install -yy python3 python3-pip
            pip3 install --upgrade pip
  pip3-install:
    description: Install a package or more through pip3.
    parameters:
      pkglist:
        type: string
    steps:
      - run:
          name: Install a package or more through pip3.
          command: |
            pip3 install <<parameters.pkglist>>
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack:
        type: string
    steps:
      - run:
          name: Destroy environments
          command: |
            aws cloudformation delete-stack --stack-name "<<parameters.stack>>"

  revert-migrations:
    description: Revert database migration.
    steps:
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            npm run migrations:revert

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - save_cache:
          paths: [frontend/dist]
          key: frontend-artifacts

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - save_cache:
          paths: [backend/dist]
          key: backend-artifacts

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          working_directory: ./frontend
          command: |
            npm install
            npm run test

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          working_directory: ./backend
          command: |
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend-end audit
          working_directory: ./frontend
          command: |
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end audit
          working_directory: ./backend
          command: |
            npm install
            npm audit fix --audit-level=critical --force  
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/aws:2022.09.1
    steps:
      - checkout
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to Ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - when:
          condition: on_fail
          steps:
            - destroy-environment:
                stack: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - when:
          condition: on_fail
          steps:
            - destroy-environment:
                stack: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "d2:2a:4a:4f:17:9c:a5:87:b8:9e:7a:d6:12:b1:5d:ce"
      - attach_workspace:
          at: .
      - setup-pip3
      - pip3-install:
          pkglist: ansible
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
      - when:
          condition: on_fail
          steps:
            - pip3-install:
                pkglist: awscli
      - when:
          condition: on_fail
          steps:
            - destroy-environment:
                stack: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - when:
          condition: on_fail
          steps:
            - destroy-environment:
                stack: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      # - run:
      #     name: Downgrade npm and install backend
      #     working_directory: ./backend
      #     command: |
      #       sudo npm install -g npm@latest-2
      #       # npm install
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm install
            # npm run build
            npm run migrations | tee migrations_dump.txt || \
            (cat /home/circleci/.npm/_logs/*.log && exit 3)
            ls -a
      - run:
          name: Send migration results to kvdb
          working_directory: ./backend
          command: |
            grep -q "has been executed successfully" \
            migrations_dump.txt && \
            curl https://kvdb.io/73BxsktDqNfPCXWvm3FfVm/migration_${CIRCLE_WORKFLOW_ID:0:7}?access_token=${KVDB_ACCESS_TOKEN} -d '1' \
            || true  # avoid rollback if migrations work but curl fails
      - when:
          condition: on_fail
          steps:
            - setup-pip3
      - when:
          condition: on_fail
          steps:
            - pip3-install:
                pkglist: awscli
      - when:
          condition: on_fail
          steps:
            - revert-migrations
      - when:
          condition: on_fail
          steps:
            - destroy-environment:
                stack: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - when:
          condition: on_fail
          steps:
            - destroy-environment:
                stack: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys: [frontend-build]
      - restore_cache:
          keys: [frontend-artifacts]
      - setup-pip3
      - pip3-install:
          pkglist: "awscli ansible"
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople" \
                --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - when:
          condition: on_fail
          steps:
            - revert-migrations
      - when:
          condition: on_fail
          steps:
            - destroy-environment:
                stack: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - when:
          condition: on_fail
          steps:
            - destroy-environment:
                stack: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Get S3 url from frontend.yml operation
          command: |
            aws cloudformation --region us-east-1 describe-stacks \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Stacks[0].Outputs[?OutputKey=='WebsiteURL'].OutputValue" \
              --output text
            || true # avoid rollback if deployment succeeds but stack query fails

  # deploy-backend:
  #   docker:
  #     - image: cimg/node:13.8.0
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints:
  #          - "ea:55:1c:9c:5c:df:79:68:04:c9:cc:db:a8:50:d5:36:8b:23:dd:75"
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         name: Install ansible and awscli
  #         command: |
  #           sudo apt -y update && sudo apt install -yy python3 python3-pip
  #           pip3 install --upgrade pip
  #           pip3 install awscli
  #           pip3 install ansible
  #     - run:
  #         name: build backend
  #         working_directory: ./backend
  #         command: |
  #           npm install
  #           npm run build
  #           cd ..
  #           tar -C backend -czvf artifact.tar.gz .
  #           cd .circleci/ansible
  #           echo "Contents  of the inventory.txt file is"
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml
  #     - destroy-environment:
  #         stack: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  #     - destroy-environment:
  #         stack: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-backend:
          requires:
            - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - deploy-infrastructure:
          requires:
            - build-backend
            - build-frontend
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
            - build-frontend
      - deploy-frontend:
          requires:
            - run-migrations
